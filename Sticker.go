// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatgen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StickerT struct {
	MediaId string `json:"media_id"`
	Temp string `json:"temp"`
	Pos *OffsetT `json:"pos"`
	Size *OffsetT `json:"size"`
	Rotation float32 `json:"rotation"`
	Scale float32 `json:"scale"`
	Emoji string `json:"emoji"`
}

func (t *StickerT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	mediaIdOffset := builder.CreateString(t.MediaId)
	tempOffset := builder.CreateString(t.Temp)
	emojiOffset := builder.CreateString(t.Emoji)
	StickerStart(builder)
	StickerAddMediaId(builder, mediaIdOffset)
	StickerAddTemp(builder, tempOffset)
	posOffset := t.Pos.Pack(builder)
	StickerAddPos(builder, posOffset)
	sizeOffset := t.Size.Pack(builder)
	StickerAddSize(builder, sizeOffset)
	StickerAddRotation(builder, t.Rotation)
	StickerAddScale(builder, t.Scale)
	StickerAddEmoji(builder, emojiOffset)
	return StickerEnd(builder)
}

func (rcv *Sticker) UnPackTo(t *StickerT) {
	t.MediaId = string(rcv.MediaId())
	t.Temp = string(rcv.Temp())
	t.Pos = rcv.Pos(nil).UnPack()
	t.Size = rcv.Size(nil).UnPack()
	t.Rotation = rcv.Rotation()
	t.Scale = rcv.Scale()
	t.Emoji = string(rcv.Emoji())
}

func (rcv *Sticker) UnPack() *StickerT {
	if rcv == nil { return nil }
	t := &StickerT{}
	rcv.UnPackTo(t)
	return t
}

type Sticker struct {
	_tab flatbuffers.Table
}

func GetRootAsSticker(buf []byte, offset flatbuffers.UOffsetT) *Sticker {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Sticker{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSticker(buf []byte, offset flatbuffers.UOffsetT) *Sticker {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Sticker{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Sticker) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Sticker) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Sticker) MediaId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Sticker) Temp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Sticker) Pos(obj *Offset) *Offset {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Offset)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Sticker) Size(obj *Offset) *Offset {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Offset)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Sticker) Rotation() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Sticker) MutateRotation(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func (rcv *Sticker) Scale() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Sticker) MutateScale(n float32) bool {
	return rcv._tab.MutateFloat32Slot(14, n)
}

func (rcv *Sticker) Emoji() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func StickerStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func StickerAddMediaId(builder *flatbuffers.Builder, mediaId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(mediaId), 0)
}
func StickerAddTemp(builder *flatbuffers.Builder, temp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(temp), 0)
}
func StickerAddPos(builder *flatbuffers.Builder, pos flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(pos), 0)
}
func StickerAddSize(builder *flatbuffers.Builder, size flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(size), 0)
}
func StickerAddRotation(builder *flatbuffers.Builder, rotation float32) {
	builder.PrependFloat32Slot(4, rotation, 0.0)
}
func StickerAddScale(builder *flatbuffers.Builder, scale float32) {
	builder.PrependFloat32Slot(5, scale, 0.0)
}
func StickerAddEmoji(builder *flatbuffers.Builder, emoji flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(emoji), 0)
}
func StickerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
