// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatgen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AreaT struct {
	Center *LatLonT `json:"center"`
	Perim []*LatLonT `json:"perim"`
}

func (t *AreaT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	perimOffset := flatbuffers.UOffsetT(0)
	if t.Perim != nil {
		perimLength := len(t.Perim)
		AreaStartPerimVector(builder, perimLength)
		for j := perimLength - 1; j >= 0; j-- {
			t.Perim[j].Pack(builder)
		}
		perimOffset = builder.EndVector(perimLength)
	}
	AreaStart(builder)
	centerOffset := t.Center.Pack(builder)
	AreaAddCenter(builder, centerOffset)
	AreaAddPerim(builder, perimOffset)
	return AreaEnd(builder)
}

func (rcv *Area) UnPackTo(t *AreaT) {
	t.Center = rcv.Center(nil).UnPack()
	perimLength := rcv.PerimLength()
	t.Perim = make([]*LatLonT, perimLength)
	for j := 0; j < perimLength; j++ {
		x := LatLon{}
		rcv.Perim(&x, j)
		t.Perim[j] = x.UnPack()
	}
}

func (rcv *Area) UnPack() *AreaT {
	if rcv == nil { return nil }
	t := &AreaT{}
	rcv.UnPackTo(t)
	return t
}

type Area struct {
	_tab flatbuffers.Table
}

func GetRootAsArea(buf []byte, offset flatbuffers.UOffsetT) *Area {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Area{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsArea(buf []byte, offset flatbuffers.UOffsetT) *Area {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Area{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Area) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Area) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Area) Center(obj *LatLon) *LatLon {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(LatLon)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Area) Perim(obj *LatLon, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 16
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Area) PerimLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func AreaStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AreaAddCenter(builder *flatbuffers.Builder, center flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(center), 0)
}
func AreaAddPerim(builder *flatbuffers.Builder, perim flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(perim), 0)
}
func AreaStartPerimVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(16, numElems, 8)
}
func AreaEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
