// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatgen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PushIdT struct {
	U32 uint32 `json:"u32"`
	Timestamp int64 `json:"timestamp"`
	NodeId *NodeIdT `json:"node_id"`
	Device uint32 `json:"device"`
	Prefix byte `json:"prefix"`
}

func (t *PushIdT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	nodeIdOffset := t.NodeId.Pack(builder)
	PushIdStart(builder)
	PushIdAddU32(builder, t.U32)
	PushIdAddTimestamp(builder, t.Timestamp)
	PushIdAddNodeId(builder, nodeIdOffset)
	PushIdAddDevice(builder, t.Device)
	PushIdAddPrefix(builder, t.Prefix)
	return PushIdEnd(builder)
}

func (rcv *PushId) UnPackTo(t *PushIdT) {
	t.U32 = rcv.U32()
	t.Timestamp = rcv.Timestamp()
	t.NodeId = rcv.NodeId(nil).UnPack()
	t.Device = rcv.Device()
	t.Prefix = rcv.Prefix()
}

func (rcv *PushId) UnPack() *PushIdT {
	if rcv == nil {
		return nil
	}
	t := &PushIdT{}
	rcv.UnPackTo(t)
	return t
}

type PushId struct {
	_tab flatbuffers.Table
}

func GetRootAsPushId(buf []byte, offset flatbuffers.UOffsetT) *PushId {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PushId{}
	x.Init(buf, n+offset)
	return x
}

func FinishPushIdBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPushId(buf []byte, offset flatbuffers.UOffsetT) *PushId {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PushId{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPushIdBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *PushId) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PushId) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PushId) U32() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PushId) MutateU32(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *PushId) Timestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PushId) MutateTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *PushId) NodeId(obj *NodeId) *NodeId {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(NodeId)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PushId) Device() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PushId) MutateDevice(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *PushId) Prefix() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PushId) MutatePrefix(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

func PushIdStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func PushIdAddU32(builder *flatbuffers.Builder, u32 uint32) {
	builder.PrependUint32Slot(0, u32, 0)
}
func PushIdAddTimestamp(builder *flatbuffers.Builder, timestamp int64) {
	builder.PrependInt64Slot(1, timestamp, 0)
}
func PushIdAddNodeId(builder *flatbuffers.Builder, nodeId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(nodeId), 0)
}
func PushIdAddDevice(builder *flatbuffers.Builder, device uint32) {
	builder.PrependUint32Slot(3, device, 0)
}
func PushIdAddPrefix(builder *flatbuffers.Builder, prefix byte) {
	builder.PrependByteSlot(4, prefix, 0)
}
func PushIdEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
