// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatgen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FullStickerT struct {
	Sticker *StickerT `json:"sticker"`
	FullMedia *FullMediaT `json:"full_media"`
}

func (t *FullStickerT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	stickerOffset := t.Sticker.Pack(builder)
	fullMediaOffset := t.FullMedia.Pack(builder)
	FullStickerStart(builder)
	FullStickerAddSticker(builder, stickerOffset)
	FullStickerAddFullMedia(builder, fullMediaOffset)
	return FullStickerEnd(builder)
}

func (rcv *FullSticker) UnPackTo(t *FullStickerT) {
	t.Sticker = rcv.Sticker(nil).UnPack()
	t.FullMedia = rcv.FullMedia(nil).UnPack()
}

func (rcv *FullSticker) UnPack() *FullStickerT {
	if rcv == nil {
		return nil
	}
	t := &FullStickerT{}
	rcv.UnPackTo(t)
	return t
}

type FullSticker struct {
	_tab flatbuffers.Table
}

func GetRootAsFullSticker(buf []byte, offset flatbuffers.UOffsetT) *FullSticker {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FullSticker{}
	x.Init(buf, n+offset)
	return x
}

func FinishFullStickerBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsFullSticker(buf []byte, offset flatbuffers.UOffsetT) *FullSticker {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FullSticker{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedFullStickerBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *FullSticker) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FullSticker) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FullSticker) Sticker(obj *Sticker) *Sticker {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Sticker)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *FullSticker) FullMedia(obj *FullMedia) *FullMedia {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(FullMedia)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func FullStickerStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func FullStickerAddSticker(builder *flatbuffers.Builder, sticker flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(sticker), 0)
}
func FullStickerAddFullMedia(builder *flatbuffers.Builder, fullMedia flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(fullMedia), 0)
}
func FullStickerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
