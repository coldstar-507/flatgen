// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatgen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PaymentRefT struct {
	Timestamp int64 `json:"timestamp"`
	PaymentIdRaw []byte `json:"payment_id_raw"`
	Prefix byte `json:"prefix"`
}

func (t *PaymentRefT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	paymentIdRawOffset := flatbuffers.UOffsetT(0)
	if t.PaymentIdRaw != nil {
		paymentIdRawOffset = builder.CreateByteString(t.PaymentIdRaw)
	}
	PaymentRefStart(builder)
	PaymentRefAddTimestamp(builder, t.Timestamp)
	PaymentRefAddPaymentIdRaw(builder, paymentIdRawOffset)
	PaymentRefAddPrefix(builder, t.Prefix)
	return PaymentRefEnd(builder)
}

func (rcv *PaymentRef) UnPackTo(t *PaymentRefT) {
	t.Timestamp = rcv.Timestamp()
	t.PaymentIdRaw = rcv.PaymentIdRawBytes()
	t.Prefix = rcv.Prefix()
}

func (rcv *PaymentRef) UnPack() *PaymentRefT {
	if rcv == nil {
		return nil
	}
	t := &PaymentRefT{}
	rcv.UnPackTo(t)
	return t
}

type PaymentRef struct {
	_tab flatbuffers.Table
}

func GetRootAsPaymentRef(buf []byte, offset flatbuffers.UOffsetT) *PaymentRef {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PaymentRef{}
	x.Init(buf, n+offset)
	return x
}

func FinishPaymentRefBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPaymentRef(buf []byte, offset flatbuffers.UOffsetT) *PaymentRef {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PaymentRef{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPaymentRefBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *PaymentRef) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PaymentRef) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PaymentRef) Timestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PaymentRef) MutateTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *PaymentRef) PaymentIdRaw(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *PaymentRef) PaymentIdRawLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *PaymentRef) PaymentIdRawBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PaymentRef) MutatePaymentIdRaw(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *PaymentRef) Prefix() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PaymentRef) MutatePrefix(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func PaymentRefStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func PaymentRefAddTimestamp(builder *flatbuffers.Builder, timestamp int64) {
	builder.PrependInt64Slot(0, timestamp, 0)
}
func PaymentRefAddPaymentIdRaw(builder *flatbuffers.Builder, paymentIdRaw flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(paymentIdRaw), 0)
}
func PaymentRefStartPaymentIdRawVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func PaymentRefAddPrefix(builder *flatbuffers.Builder, prefix byte) {
	builder.PrependByteSlot(2, prefix, 0)
}
func PaymentRefEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
