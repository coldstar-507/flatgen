// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatgen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LatLonT struct {
	Latitude float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

func (t *LatLonT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	return CreateLatLon(builder, t.Latitude, t.Longitude)
}
func (rcv *LatLon) UnPackTo(t *LatLonT) {
	t.Latitude = rcv.Latitude()
	t.Longitude = rcv.Longitude()
}

func (rcv *LatLon) UnPack() *LatLonT {
	if rcv == nil { return nil }
	t := &LatLonT{}
	rcv.UnPackTo(t)
	return t
}

type LatLon struct {
	_tab flatbuffers.Struct
}

func (rcv *LatLon) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LatLon) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *LatLon) Latitude() float64 {
	return rcv._tab.GetFloat64(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *LatLon) MutateLatitude(n float64) bool {
	return rcv._tab.MutateFloat64(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *LatLon) Longitude() float64 {
	return rcv._tab.GetFloat64(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *LatLon) MutateLongitude(n float64) bool {
	return rcv._tab.MutateFloat64(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func CreateLatLon(builder *flatbuffers.Builder, latitude float64, longitude float64) flatbuffers.UOffsetT {
	builder.Prep(8, 16)
	builder.PrependFloat64(longitude)
	builder.PrependFloat64(latitude)
	return builder.Offset()
}
