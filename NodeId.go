// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatgen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NodeIdT struct {
	Timestamp int64 `json:"timestamp"`
	U32 uint32 `json:"u32"`
	Prefix byte `json:"prefix"`
}

func (t *NodeIdT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	NodeIdStart(builder)
	NodeIdAddTimestamp(builder, t.Timestamp)
	NodeIdAddU32(builder, t.U32)
	NodeIdAddPrefix(builder, t.Prefix)
	return NodeIdEnd(builder)
}

func (rcv *NodeId) UnPackTo(t *NodeIdT) {
	t.Timestamp = rcv.Timestamp()
	t.U32 = rcv.U32()
	t.Prefix = rcv.Prefix()
}

func (rcv *NodeId) UnPack() *NodeIdT {
	if rcv == nil {
		return nil
	}
	t := &NodeIdT{}
	rcv.UnPackTo(t)
	return t
}

type NodeId struct {
	_tab flatbuffers.Table
}

func GetRootAsNodeId(buf []byte, offset flatbuffers.UOffsetT) *NodeId {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NodeId{}
	x.Init(buf, n+offset)
	return x
}

func FinishNodeIdBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsNodeId(buf []byte, offset flatbuffers.UOffsetT) *NodeId {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &NodeId{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedNodeIdBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *NodeId) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NodeId) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NodeId) Timestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NodeId) MutateTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *NodeId) U32() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NodeId) MutateU32(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *NodeId) Prefix() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NodeId) MutatePrefix(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func NodeIdStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func NodeIdAddTimestamp(builder *flatbuffers.Builder, timestamp int64) {
	builder.PrependInt64Slot(0, timestamp, 0)
}
func NodeIdAddU32(builder *flatbuffers.Builder, u32 uint32) {
	builder.PrependUint32Slot(1, u32, 0)
}
func NodeIdAddPrefix(builder *flatbuffers.Builder, prefix byte) {
	builder.PrependByteSlot(2, prefix, 0)
}
func NodeIdEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
