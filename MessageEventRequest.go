// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatgen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MessageEventRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsMessageEventRequest(buf []byte, offset flatbuffers.UOffsetT) *MessageEventRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MessageEventRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMessageEventRequest(buf []byte, offset flatbuffers.UOffsetT) *MessageEventRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MessageEventRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MessageEventRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MessageEventRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MessageEventRequest) Type() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageEventRequest) MutateType(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

func (rcv *MessageEventRequest) MessageEvent(obj *MessageEvent) *MessageEvent {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(MessageEvent)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MessageEventRequest) FullMedia(obj *FullMedia) *FullMedia {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(FullMedia)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MessageEventRequest) Notifications(obj *Notifications) *Notifications {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Notifications)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func MessageEventRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func MessageEventRequestAddType(builder *flatbuffers.Builder, type_ byte) {
	builder.PrependByteSlot(0, type_, 0)
}
func MessageEventRequestAddMessageEvent(builder *flatbuffers.Builder, messageEvent flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(messageEvent), 0)
}
func MessageEventRequestAddFullMedia(builder *flatbuffers.Builder, fullMedia flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(fullMedia), 0)
}
func MessageEventRequestAddNotifications(builder *flatbuffers.Builder, notifications flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(notifications), 0)
}
func MessageEventRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
