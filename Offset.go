// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatgen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type OffsetT struct {
	X float32 `json:"x"`
	Y float32 `json:"y"`
}

func (t *OffsetT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	return CreateOffset(builder, t.X, t.Y)
}
func (rcv *Offset) UnPackTo(t *OffsetT) {
	t.X = rcv.X()
	t.Y = rcv.Y()
}

func (rcv *Offset) UnPack() *OffsetT {
	if rcv == nil { return nil }
	t := &OffsetT{}
	rcv.UnPackTo(t)
	return t
}

type Offset struct {
	_tab flatbuffers.Struct
}

func (rcv *Offset) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Offset) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *Offset) X() float32 {
	return rcv._tab.GetFloat32(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *Offset) MutateX(n float32) bool {
	return rcv._tab.MutateFloat32(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *Offset) Y() float32 {
	return rcv._tab.GetFloat32(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}
func (rcv *Offset) MutateY(n float32) bool {
	return rcv._tab.MutateFloat32(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

func CreateOffset(builder *flatbuffers.Builder, x float32, y float32) flatbuffers.UOffsetT {
	builder.Prep(4, 8)
	builder.PrependFloat32(y)
	builder.PrependFloat32(x)
	return builder.Offset()
}
