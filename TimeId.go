// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatgen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TimeIdT struct {
	Place string `json:"place"`
	Unik string `json:"unik"`
	Timestamp int64 `json:"timestamp"`
}

func (t *TimeIdT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	placeOffset := builder.CreateString(t.Place)
	unikOffset := builder.CreateString(t.Unik)
	TimeIdStart(builder)
	TimeIdAddPlace(builder, placeOffset)
	TimeIdAddUnik(builder, unikOffset)
	TimeIdAddTimestamp(builder, t.Timestamp)
	return TimeIdEnd(builder)
}

func (rcv *TimeId) UnPackTo(t *TimeIdT) {
	t.Place = string(rcv.Place())
	t.Unik = string(rcv.Unik())
	t.Timestamp = rcv.Timestamp()
}

func (rcv *TimeId) UnPack() *TimeIdT {
	if rcv == nil { return nil }
	t := &TimeIdT{}
	rcv.UnPackTo(t)
	return t
}

type TimeId struct {
	_tab flatbuffers.Table
}

func GetRootAsTimeId(buf []byte, offset flatbuffers.UOffsetT) *TimeId {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TimeId{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTimeId(buf []byte, offset flatbuffers.UOffsetT) *TimeId {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TimeId{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TimeId) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TimeId) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TimeId) Place() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TimeId) Unik() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TimeId) Timestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimeId) MutateTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func TimeIdStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func TimeIdAddPlace(builder *flatbuffers.Builder, place flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(place), 0)
}
func TimeIdAddUnik(builder *flatbuffers.Builder, unik flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(unik), 0)
}
func TimeIdAddTimestamp(builder *flatbuffers.Builder, timestamp int64) {
	builder.PrependInt64Slot(2, timestamp, 0)
}
func TimeIdEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
