// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatgen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MessageTargetT struct {
	Token string `json:"token"`
	ShowNotif bool `json:"show_notif"`
}

func (t *MessageTargetT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	tokenOffset := flatbuffers.UOffsetT(0)
	if t.Token != "" {
		tokenOffset = builder.CreateString(t.Token)
	}
	MessageTargetStart(builder)
	MessageTargetAddToken(builder, tokenOffset)
	MessageTargetAddShowNotif(builder, t.ShowNotif)
	return MessageTargetEnd(builder)
}

func (rcv *MessageTarget) UnPackTo(t *MessageTargetT) {
	t.Token = string(rcv.Token())
	t.ShowNotif = rcv.ShowNotif()
}

func (rcv *MessageTarget) UnPack() *MessageTargetT {
	if rcv == nil {
		return nil
	}
	t := &MessageTargetT{}
	rcv.UnPackTo(t)
	return t
}

type MessageTarget struct {
	_tab flatbuffers.Table
}

func GetRootAsMessageTarget(buf []byte, offset flatbuffers.UOffsetT) *MessageTarget {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MessageTarget{}
	x.Init(buf, n+offset)
	return x
}

func FinishMessageTargetBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsMessageTarget(buf []byte, offset flatbuffers.UOffsetT) *MessageTarget {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MessageTarget{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMessageTargetBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *MessageTarget) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MessageTarget) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MessageTarget) Token() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageTarget) ShowNotif() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageTarget) MutateShowNotif(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func MessageTargetStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func MessageTargetAddToken(builder *flatbuffers.Builder, token flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(token), 0)
}
func MessageTargetAddShowNotif(builder *flatbuffers.Builder, showNotif bool) {
	builder.PrependBoolSlot(1, showNotif, false)
}
func MessageTargetEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
