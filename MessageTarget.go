// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatgen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MessageTarget struct {
	_tab flatbuffers.Table
}

func GetRootAsMessageTarget(buf []byte, offset flatbuffers.UOffsetT) *MessageTarget {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MessageTarget{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMessageTarget(buf []byte, offset flatbuffers.UOffsetT) *MessageTarget {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MessageTarget{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MessageTarget) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MessageTarget) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MessageTarget) UserId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageTarget) DeviceId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageTarget) Token() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageTarget) ShowNotif() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageTarget) MutateShowNotif(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *MessageTarget) DoPush() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageTarget) MutateDoPush(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func MessageTargetStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func MessageTargetAddUserId(builder *flatbuffers.Builder, userId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(userId), 0)
}
func MessageTargetAddDeviceId(builder *flatbuffers.Builder, deviceId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(deviceId), 0)
}
func MessageTargetAddToken(builder *flatbuffers.Builder, token flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(token), 0)
}
func MessageTargetAddShowNotif(builder *flatbuffers.Builder, showNotif bool) {
	builder.PrependBoolSlot(3, showNotif, false)
}
func MessageTargetAddDoPush(builder *flatbuffers.Builder, doPush bool) {
	builder.PrependBoolSlot(4, doPush, false)
}
func MessageTargetEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
