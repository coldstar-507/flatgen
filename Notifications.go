// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatgen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NotificationsT struct {
	Sender string `json:"sender"`
	Root string `json:"root"`
	Header string `json:"header"`
	Body string `json:"body"`
	Targets []*MessageTargetT `json:"targets"`
}

func (t *NotificationsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	senderOffset := builder.CreateString(t.Sender)
	rootOffset := builder.CreateString(t.Root)
	headerOffset := builder.CreateString(t.Header)
	bodyOffset := builder.CreateString(t.Body)
	targetsOffset := flatbuffers.UOffsetT(0)
	if t.Targets != nil {
		targetsLength := len(t.Targets)
		targetsOffsets := make([]flatbuffers.UOffsetT, targetsLength)
		for j := 0; j < targetsLength; j++ {
			targetsOffsets[j] = t.Targets[j].Pack(builder)
		}
		NotificationsStartTargetsVector(builder, targetsLength)
		for j := targetsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(targetsOffsets[j])
		}
		targetsOffset = builder.EndVector(targetsLength)
	}
	NotificationsStart(builder)
	NotificationsAddSender(builder, senderOffset)
	NotificationsAddRoot(builder, rootOffset)
	NotificationsAddHeader(builder, headerOffset)
	NotificationsAddBody(builder, bodyOffset)
	NotificationsAddTargets(builder, targetsOffset)
	return NotificationsEnd(builder)
}

func (rcv *Notifications) UnPackTo(t *NotificationsT) {
	t.Sender = string(rcv.Sender())
	t.Root = string(rcv.Root())
	t.Header = string(rcv.Header())
	t.Body = string(rcv.Body())
	targetsLength := rcv.TargetsLength()
	t.Targets = make([]*MessageTargetT, targetsLength)
	for j := 0; j < targetsLength; j++ {
		x := MessageTarget{}
		rcv.Targets(&x, j)
		t.Targets[j] = x.UnPack()
	}
}

func (rcv *Notifications) UnPack() *NotificationsT {
	if rcv == nil { return nil }
	t := &NotificationsT{}
	rcv.UnPackTo(t)
	return t
}

type Notifications struct {
	_tab flatbuffers.Table
}

func GetRootAsNotifications(buf []byte, offset flatbuffers.UOffsetT) *Notifications {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Notifications{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsNotifications(buf []byte, offset flatbuffers.UOffsetT) *Notifications {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Notifications{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Notifications) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Notifications) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Notifications) Sender() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Notifications) Root() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Notifications) Header() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Notifications) Body() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Notifications) Targets(obj *MessageTarget, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Notifications) TargetsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func NotificationsStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func NotificationsAddSender(builder *flatbuffers.Builder, sender flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(sender), 0)
}
func NotificationsAddRoot(builder *flatbuffers.Builder, root flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(root), 0)
}
func NotificationsAddHeader(builder *flatbuffers.Builder, header flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(header), 0)
}
func NotificationsAddBody(builder *flatbuffers.Builder, body flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(body), 0)
}
func NotificationsAddTargets(builder *flatbuffers.Builder, targets flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(targets), 0)
}
func NotificationsStartTargetsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func NotificationsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
