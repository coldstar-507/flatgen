// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatgen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MediaRefT struct {
	Timestamp int64 `json:"timestamp"`
	Place uint16 `json:"place"`
	MediaId *MediaIdT `json:"media_id"`
	Permanent bool `json:"permanent"`
	Kind byte `json:"kind"`
}

func (t *MediaRefT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	mediaIdOffset := t.MediaId.Pack(builder)
	MediaRefStart(builder)
	MediaRefAddTimestamp(builder, t.Timestamp)
	MediaRefAddPlace(builder, t.Place)
	MediaRefAddMediaId(builder, mediaIdOffset)
	MediaRefAddPermanent(builder, t.Permanent)
	MediaRefAddKind(builder, t.Kind)
	return MediaRefEnd(builder)
}

func (rcv *MediaRef) UnPackTo(t *MediaRefT) {
	t.Timestamp = rcv.Timestamp()
	t.Place = rcv.Place()
	t.MediaId = rcv.MediaId(nil).UnPack()
	t.Permanent = rcv.Permanent()
	t.Kind = rcv.Kind()
}

func (rcv *MediaRef) UnPack() *MediaRefT {
	if rcv == nil {
		return nil
	}
	t := &MediaRefT{}
	rcv.UnPackTo(t)
	return t
}

type MediaRef struct {
	_tab flatbuffers.Table
}

func GetRootAsMediaRef(buf []byte, offset flatbuffers.UOffsetT) *MediaRef {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MediaRef{}
	x.Init(buf, n+offset)
	return x
}

func FinishMediaRefBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsMediaRef(buf []byte, offset flatbuffers.UOffsetT) *MediaRef {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MediaRef{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMediaRefBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *MediaRef) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MediaRef) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MediaRef) Timestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MediaRef) MutateTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *MediaRef) Place() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MediaRef) MutatePlace(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *MediaRef) MediaId(obj *MediaId) *MediaId {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(MediaId)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MediaRef) Permanent() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MediaRef) MutatePermanent(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *MediaRef) Kind() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MediaRef) MutateKind(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

func MediaRefStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func MediaRefAddTimestamp(builder *flatbuffers.Builder, timestamp int64) {
	builder.PrependInt64Slot(0, timestamp, 0)
}
func MediaRefAddPlace(builder *flatbuffers.Builder, place uint16) {
	builder.PrependUint16Slot(1, place, 0)
}
func MediaRefAddMediaId(builder *flatbuffers.Builder, mediaId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(mediaId), 0)
}
func MediaRefAddPermanent(builder *flatbuffers.Builder, permanent bool) {
	builder.PrependBoolSlot(3, permanent, false)
}
func MediaRefAddKind(builder *flatbuffers.Builder, kind byte) {
	builder.PrependByteSlot(4, kind, 0)
}
func MediaRefEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
