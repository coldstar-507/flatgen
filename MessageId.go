// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatgen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MessageIdT struct {
	Timestamp int64 `json:"timestamp"`
	U32 uint32 `json:"u32"`
	Root *RootT `json:"root"`
	Place uint16 `json:"place"`
	Kind byte `json:"kind"`
}

func (t *MessageIdT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	rootOffset := t.Root.Pack(builder)
	MessageIdStart(builder)
	MessageIdAddTimestamp(builder, t.Timestamp)
	MessageIdAddU32(builder, t.U32)
	MessageIdAddRoot(builder, rootOffset)
	MessageIdAddPlace(builder, t.Place)
	MessageIdAddKind(builder, t.Kind)
	return MessageIdEnd(builder)
}

func (rcv *MessageId) UnPackTo(t *MessageIdT) {
	t.Timestamp = rcv.Timestamp()
	t.U32 = rcv.U32()
	t.Root = rcv.Root(nil).UnPack()
	t.Place = rcv.Place()
	t.Kind = rcv.Kind()
}

func (rcv *MessageId) UnPack() *MessageIdT {
	if rcv == nil {
		return nil
	}
	t := &MessageIdT{}
	rcv.UnPackTo(t)
	return t
}

type MessageId struct {
	_tab flatbuffers.Table
}

func GetRootAsMessageId(buf []byte, offset flatbuffers.UOffsetT) *MessageId {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MessageId{}
	x.Init(buf, n+offset)
	return x
}

func FinishMessageIdBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsMessageId(buf []byte, offset flatbuffers.UOffsetT) *MessageId {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MessageId{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMessageIdBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *MessageId) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MessageId) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MessageId) Timestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageId) MutateTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *MessageId) U32() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageId) MutateU32(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *MessageId) Root(obj *Root) *Root {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Root)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MessageId) Place() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageId) MutatePlace(n uint16) bool {
	return rcv._tab.MutateUint16Slot(10, n)
}

func (rcv *MessageId) Kind() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageId) MutateKind(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

func MessageIdStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func MessageIdAddTimestamp(builder *flatbuffers.Builder, timestamp int64) {
	builder.PrependInt64Slot(0, timestamp, 0)
}
func MessageIdAddU32(builder *flatbuffers.Builder, u32 uint32) {
	builder.PrependUint32Slot(1, u32, 0)
}
func MessageIdAddRoot(builder *flatbuffers.Builder, root flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(root), 0)
}
func MessageIdAddPlace(builder *flatbuffers.Builder, place uint16) {
	builder.PrependUint16Slot(3, place, 0)
}
func MessageIdAddKind(builder *flatbuffers.Builder, kind byte) {
	builder.PrependByteSlot(4, kind, 0)
}
func MessageIdEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
