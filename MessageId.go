// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatgen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MessageIdT struct {
	Place string `json:"place"`
	Unik string `json:"unik"`
	Timestamp int64 `json:"timestamp"`
	Root string `json:"root"`
}

func (t *MessageIdT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	placeOffset := builder.CreateString(t.Place)
	unikOffset := builder.CreateString(t.Unik)
	rootOffset := builder.CreateString(t.Root)
	MessageIdStart(builder)
	MessageIdAddPlace(builder, placeOffset)
	MessageIdAddUnik(builder, unikOffset)
	MessageIdAddTimestamp(builder, t.Timestamp)
	MessageIdAddRoot(builder, rootOffset)
	return MessageIdEnd(builder)
}

func (rcv *MessageId) UnPackTo(t *MessageIdT) {
	t.Place = string(rcv.Place())
	t.Unik = string(rcv.Unik())
	t.Timestamp = rcv.Timestamp()
	t.Root = string(rcv.Root())
}

func (rcv *MessageId) UnPack() *MessageIdT {
	if rcv == nil { return nil }
	t := &MessageIdT{}
	rcv.UnPackTo(t)
	return t
}

type MessageId struct {
	_tab flatbuffers.Table
}

func GetRootAsMessageId(buf []byte, offset flatbuffers.UOffsetT) *MessageId {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MessageId{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMessageId(buf []byte, offset flatbuffers.UOffsetT) *MessageId {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MessageId{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MessageId) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MessageId) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MessageId) Place() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageId) Unik() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageId) Timestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageId) MutateTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *MessageId) Root() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func MessageIdStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func MessageIdAddPlace(builder *flatbuffers.Builder, place flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(place), 0)
}
func MessageIdAddUnik(builder *flatbuffers.Builder, unik flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(unik), 0)
}
func MessageIdAddTimestamp(builder *flatbuffers.Builder, timestamp int64) {
	builder.PrependInt64Slot(2, timestamp, 0)
}
func MessageIdAddRoot(builder *flatbuffers.Builder, root flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(root), 0)
}
func MessageIdEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
