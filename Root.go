// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatgen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RootT struct {
	Primary *NodeIdT `json:"primary"`
	Secondary *NodeIdT `json:"secondary"`
	Kind byte `json:"kind"`
}

func (t *RootT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	primaryOffset := t.Primary.Pack(builder)
	secondaryOffset := t.Secondary.Pack(builder)
	RootStart(builder)
	RootAddPrimary(builder, primaryOffset)
	RootAddSecondary(builder, secondaryOffset)
	RootAddKind(builder, t.Kind)
	return RootEnd(builder)
}

func (rcv *Root) UnPackTo(t *RootT) {
	t.Primary = rcv.Primary(nil).UnPack()
	t.Secondary = rcv.Secondary(nil).UnPack()
	t.Kind = rcv.Kind()
}

func (rcv *Root) UnPack() *RootT {
	if rcv == nil {
		return nil
	}
	t := &RootT{}
	rcv.UnPackTo(t)
	return t
}

type Root struct {
	_tab flatbuffers.Table
}

func GetRootAsRoot(buf []byte, offset flatbuffers.UOffsetT) *Root {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Root{}
	x.Init(buf, n+offset)
	return x
}

func FinishRootBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsRoot(buf []byte, offset flatbuffers.UOffsetT) *Root {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Root{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRootBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Root) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Root) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Root) Primary(obj *NodeId) *NodeId {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(NodeId)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Root) Secondary(obj *NodeId) *NodeId {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(NodeId)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Root) Kind() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Root) MutateKind(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func RootStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func RootAddPrimary(builder *flatbuffers.Builder, primary flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(primary), 0)
}
func RootAddSecondary(builder *flatbuffers.Builder, secondary flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(secondary), 0)
}
func RootAddKind(builder *flatbuffers.Builder, kind byte) {
	builder.PrependByteSlot(2, kind, 0)
}
func RootEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
