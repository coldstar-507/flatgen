// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatgen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MessageEventT struct {
	ChatId *MessageIdT `json:"chat_id"`
	Type byte `json:"type"`
	ReactionId string `json:"reaction_id"`
	SenderId string `json:"sender_id"`
	SenderTag string `json:"sender_tag"`
	MessageId string `json:"message_id"`
	Root string `json:"root"`
	Tag string `json:"tag"`
	Timestamp uint64 `json:"timestamp"`
	ForwardedFrom string `json:"forwarded_from"`
	ForwardedFromTag string `json:"forwarded_from_tag"`
	Nodes []string `json:"nodes"`
	Replies []string `json:"replies"`
	Txt string `json:"txt"`
	MediaRef *MediaRefT `json:"media_ref"`
	PaymentRef *PaymentRefT `json:"payment_ref"`
	Emoji string `json:"emoji"`
	Sticks []*StickerT `json:"sticks"`
	SnipSize *OffsetT `json:"snip_size"`
}

func (t *MessageEventT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	chatIdOffset := t.ChatId.Pack(builder)
	reactionIdOffset := flatbuffers.UOffsetT(0)
	if t.ReactionId != "" {
		reactionIdOffset = builder.CreateString(t.ReactionId)
	}
	senderIdOffset := flatbuffers.UOffsetT(0)
	if t.SenderId != "" {
		senderIdOffset = builder.CreateString(t.SenderId)
	}
	senderTagOffset := flatbuffers.UOffsetT(0)
	if t.SenderTag != "" {
		senderTagOffset = builder.CreateString(t.SenderTag)
	}
	messageIdOffset := flatbuffers.UOffsetT(0)
	if t.MessageId != "" {
		messageIdOffset = builder.CreateString(t.MessageId)
	}
	rootOffset := flatbuffers.UOffsetT(0)
	if t.Root != "" {
		rootOffset = builder.CreateString(t.Root)
	}
	tagOffset := flatbuffers.UOffsetT(0)
	if t.Tag != "" {
		tagOffset = builder.CreateString(t.Tag)
	}
	forwardedFromOffset := flatbuffers.UOffsetT(0)
	if t.ForwardedFrom != "" {
		forwardedFromOffset = builder.CreateString(t.ForwardedFrom)
	}
	forwardedFromTagOffset := flatbuffers.UOffsetT(0)
	if t.ForwardedFromTag != "" {
		forwardedFromTagOffset = builder.CreateString(t.ForwardedFromTag)
	}
	nodesOffset := flatbuffers.UOffsetT(0)
	if t.Nodes != nil {
		nodesLength := len(t.Nodes)
		nodesOffsets := make([]flatbuffers.UOffsetT, nodesLength)
		for j := 0; j < nodesLength; j++ {
			nodesOffsets[j] = builder.CreateString(t.Nodes[j])
		}
		MessageEventStartNodesVector(builder, nodesLength)
		for j := nodesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(nodesOffsets[j])
		}
		nodesOffset = builder.EndVector(nodesLength)
	}
	repliesOffset := flatbuffers.UOffsetT(0)
	if t.Replies != nil {
		repliesLength := len(t.Replies)
		repliesOffsets := make([]flatbuffers.UOffsetT, repliesLength)
		for j := 0; j < repliesLength; j++ {
			repliesOffsets[j] = builder.CreateString(t.Replies[j])
		}
		MessageEventStartRepliesVector(builder, repliesLength)
		for j := repliesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(repliesOffsets[j])
		}
		repliesOffset = builder.EndVector(repliesLength)
	}
	txtOffset := flatbuffers.UOffsetT(0)
	if t.Txt != "" {
		txtOffset = builder.CreateString(t.Txt)
	}
	mediaRefOffset := t.MediaRef.Pack(builder)
	paymentRefOffset := t.PaymentRef.Pack(builder)
	emojiOffset := flatbuffers.UOffsetT(0)
	if t.Emoji != "" {
		emojiOffset = builder.CreateString(t.Emoji)
	}
	sticksOffset := flatbuffers.UOffsetT(0)
	if t.Sticks != nil {
		sticksLength := len(t.Sticks)
		sticksOffsets := make([]flatbuffers.UOffsetT, sticksLength)
		for j := 0; j < sticksLength; j++ {
			sticksOffsets[j] = t.Sticks[j].Pack(builder)
		}
		MessageEventStartSticksVector(builder, sticksLength)
		for j := sticksLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(sticksOffsets[j])
		}
		sticksOffset = builder.EndVector(sticksLength)
	}
	MessageEventStart(builder)
	MessageEventAddChatId(builder, chatIdOffset)
	MessageEventAddType(builder, t.Type)
	MessageEventAddReactionId(builder, reactionIdOffset)
	MessageEventAddSenderId(builder, senderIdOffset)
	MessageEventAddSenderTag(builder, senderTagOffset)
	MessageEventAddMessageId(builder, messageIdOffset)
	MessageEventAddRoot(builder, rootOffset)
	MessageEventAddTag(builder, tagOffset)
	MessageEventAddTimestamp(builder, t.Timestamp)
	MessageEventAddForwardedFrom(builder, forwardedFromOffset)
	MessageEventAddForwardedFromTag(builder, forwardedFromTagOffset)
	MessageEventAddNodes(builder, nodesOffset)
	MessageEventAddReplies(builder, repliesOffset)
	MessageEventAddTxt(builder, txtOffset)
	MessageEventAddMediaRef(builder, mediaRefOffset)
	MessageEventAddPaymentRef(builder, paymentRefOffset)
	MessageEventAddEmoji(builder, emojiOffset)
	MessageEventAddSticks(builder, sticksOffset)
	snipSizeOffset := t.SnipSize.Pack(builder)
	MessageEventAddSnipSize(builder, snipSizeOffset)
	return MessageEventEnd(builder)
}

func (rcv *MessageEvent) UnPackTo(t *MessageEventT) {
	t.ChatId = rcv.ChatId(nil).UnPack()
	t.Type = rcv.Type()
	t.ReactionId = string(rcv.ReactionId())
	t.SenderId = string(rcv.SenderId())
	t.SenderTag = string(rcv.SenderTag())
	t.MessageId = string(rcv.MessageId())
	t.Root = string(rcv.Root())
	t.Tag = string(rcv.Tag())
	t.Timestamp = rcv.Timestamp()
	t.ForwardedFrom = string(rcv.ForwardedFrom())
	t.ForwardedFromTag = string(rcv.ForwardedFromTag())
	nodesLength := rcv.NodesLength()
	t.Nodes = make([]string, nodesLength)
	for j := 0; j < nodesLength; j++ {
		t.Nodes[j] = string(rcv.Nodes(j))
	}
	repliesLength := rcv.RepliesLength()
	t.Replies = make([]string, repliesLength)
	for j := 0; j < repliesLength; j++ {
		t.Replies[j] = string(rcv.Replies(j))
	}
	t.Txt = string(rcv.Txt())
	t.MediaRef = rcv.MediaRef(nil).UnPack()
	t.PaymentRef = rcv.PaymentRef(nil).UnPack()
	t.Emoji = string(rcv.Emoji())
	sticksLength := rcv.SticksLength()
	t.Sticks = make([]*StickerT, sticksLength)
	for j := 0; j < sticksLength; j++ {
		x := Sticker{}
		rcv.Sticks(&x, j)
		t.Sticks[j] = x.UnPack()
	}
	t.SnipSize = rcv.SnipSize(nil).UnPack()
}

func (rcv *MessageEvent) UnPack() *MessageEventT {
	if rcv == nil {
		return nil
	}
	t := &MessageEventT{}
	rcv.UnPackTo(t)
	return t
}

type MessageEvent struct {
	_tab flatbuffers.Table
}

func GetRootAsMessageEvent(buf []byte, offset flatbuffers.UOffsetT) *MessageEvent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MessageEvent{}
	x.Init(buf, n+offset)
	return x
}

func FinishMessageEventBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsMessageEvent(buf []byte, offset flatbuffers.UOffsetT) *MessageEvent {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MessageEvent{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMessageEventBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *MessageEvent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MessageEvent) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MessageEvent) ChatId(obj *MessageId) *MessageId {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(MessageId)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MessageEvent) Type() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageEvent) MutateType(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *MessageEvent) ReactionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageEvent) SenderId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageEvent) SenderTag() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageEvent) MessageId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageEvent) Root() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageEvent) Tag() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageEvent) Timestamp() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageEvent) MutateTimestamp(n uint64) bool {
	return rcv._tab.MutateUint64Slot(20, n)
}

func (rcv *MessageEvent) ForwardedFrom() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageEvent) ForwardedFromTag() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageEvent) Nodes(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *MessageEvent) NodesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MessageEvent) Replies(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *MessageEvent) RepliesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MessageEvent) Txt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageEvent) MediaRef(obj *MediaRef) *MediaRef {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(MediaRef)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MessageEvent) PaymentRef(obj *PaymentRef) *PaymentRef {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(PaymentRef)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MessageEvent) Emoji() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageEvent) Sticks(obj *Sticker, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *MessageEvent) SticksLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MessageEvent) SnipSize(obj *Offset) *Offset {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Offset)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func MessageEventStart(builder *flatbuffers.Builder) {
	builder.StartObject(19)
}
func MessageEventAddChatId(builder *flatbuffers.Builder, chatId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(chatId), 0)
}
func MessageEventAddType(builder *flatbuffers.Builder, type_ byte) {
	builder.PrependByteSlot(1, type_, 0)
}
func MessageEventAddReactionId(builder *flatbuffers.Builder, reactionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(reactionId), 0)
}
func MessageEventAddSenderId(builder *flatbuffers.Builder, senderId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(senderId), 0)
}
func MessageEventAddSenderTag(builder *flatbuffers.Builder, senderTag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(senderTag), 0)
}
func MessageEventAddMessageId(builder *flatbuffers.Builder, messageId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(messageId), 0)
}
func MessageEventAddRoot(builder *flatbuffers.Builder, root flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(root), 0)
}
func MessageEventAddTag(builder *flatbuffers.Builder, tag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(tag), 0)
}
func MessageEventAddTimestamp(builder *flatbuffers.Builder, timestamp uint64) {
	builder.PrependUint64Slot(8, timestamp, 0)
}
func MessageEventAddForwardedFrom(builder *flatbuffers.Builder, forwardedFrom flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(forwardedFrom), 0)
}
func MessageEventAddForwardedFromTag(builder *flatbuffers.Builder, forwardedFromTag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(forwardedFromTag), 0)
}
func MessageEventAddNodes(builder *flatbuffers.Builder, nodes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(nodes), 0)
}
func MessageEventStartNodesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MessageEventAddReplies(builder *flatbuffers.Builder, replies flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(replies), 0)
}
func MessageEventStartRepliesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MessageEventAddTxt(builder *flatbuffers.Builder, txt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(txt), 0)
}
func MessageEventAddMediaRef(builder *flatbuffers.Builder, mediaRef flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(mediaRef), 0)
}
func MessageEventAddPaymentRef(builder *flatbuffers.Builder, paymentRef flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(paymentRef), 0)
}
func MessageEventAddEmoji(builder *flatbuffers.Builder, emoji flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(emoji), 0)
}
func MessageEventAddSticks(builder *flatbuffers.Builder, sticks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(sticks), 0)
}
func MessageEventStartSticksVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MessageEventAddSnipSize(builder *flatbuffers.Builder, snipSize flatbuffers.UOffsetT) {
	builder.PrependStructSlot(18, flatbuffers.UOffsetT(snipSize), 0)
}
func MessageEventEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
