// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatgen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type HashTreeT struct {
	Root string `json:"root"`
	Hash string `json:"hash"`
}

func (t *HashTreeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	rootOffset := builder.CreateString(t.Root)
	hashOffset := builder.CreateString(t.Hash)
	HashTreeStart(builder)
	HashTreeAddRoot(builder, rootOffset)
	HashTreeAddHash(builder, hashOffset)
	return HashTreeEnd(builder)
}

func (rcv *HashTree) UnPackTo(t *HashTreeT) {
	t.Root = string(rcv.Root())
	t.Hash = string(rcv.Hash())
}

func (rcv *HashTree) UnPack() *HashTreeT {
	if rcv == nil { return nil }
	t := &HashTreeT{}
	rcv.UnPackTo(t)
	return t
}

type HashTree struct {
	_tab flatbuffers.Table
}

func GetRootAsHashTree(buf []byte, offset flatbuffers.UOffsetT) *HashTree {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &HashTree{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsHashTree(buf []byte, offset flatbuffers.UOffsetT) *HashTree {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &HashTree{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *HashTree) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *HashTree) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *HashTree) Root() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *HashTree) Hash() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func HashTreeStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func HashTreeAddRoot(builder *flatbuffers.Builder, root flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(root), 0)
}
func HashTreeAddHash(builder *flatbuffers.Builder, hash flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(hash), 0)
}
func HashTreeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
