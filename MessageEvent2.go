// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatgen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MessageEvent2T struct {
	ChatId []byte `json:"chat_id"`
	Type byte `json:"type"`
	ReactionId string `json:"reaction_id"`
	SenderId string `json:"sender_id"`
	MessageId string `json:"message_id"`
	Root string `json:"root"`
	Tag string `json:"tag"`
	Timestamp uint64 `json:"timestamp"`
	ForwardedFrom string `json:"forwarded_from"`
	PaymentId string `json:"payment_id"`
	Nodes []string `json:"nodes"`
	Replies []string `json:"replies"`
	Txt string `json:"txt"`
	MediaId string `json:"media_id"`
	TempMedia string `json:"temp_media"`
	TempPayment string `json:"temp_payment"`
	Emoji string `json:"emoji"`
	Sticks []*StickerT `json:"sticks"`
	SnipSize *OffsetT `json:"snip_size"`
}

func (t *MessageEvent2T) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	chatIdOffset := flatbuffers.UOffsetT(0)
	if t.ChatId != nil {
		chatIdOffset = builder.CreateByteString(t.ChatId)
	}
	reactionIdOffset := builder.CreateString(t.ReactionId)
	senderIdOffset := builder.CreateString(t.SenderId)
	messageIdOffset := builder.CreateString(t.MessageId)
	rootOffset := builder.CreateString(t.Root)
	tagOffset := builder.CreateString(t.Tag)
	forwardedFromOffset := builder.CreateString(t.ForwardedFrom)
	paymentIdOffset := builder.CreateString(t.PaymentId)
	nodesOffset := flatbuffers.UOffsetT(0)
	if t.Nodes != nil {
		nodesLength := len(t.Nodes)
		nodesOffsets := make([]flatbuffers.UOffsetT, nodesLength)
		for j := 0; j < nodesLength; j++ {
			nodesOffsets[j] = builder.CreateString(t.Nodes[j])
		}
		MessageEvent2StartNodesVector(builder, nodesLength)
		for j := nodesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(nodesOffsets[j])
		}
		nodesOffset = builder.EndVector(nodesLength)
	}
	repliesOffset := flatbuffers.UOffsetT(0)
	if t.Replies != nil {
		repliesLength := len(t.Replies)
		repliesOffsets := make([]flatbuffers.UOffsetT, repliesLength)
		for j := 0; j < repliesLength; j++ {
			repliesOffsets[j] = builder.CreateString(t.Replies[j])
		}
		MessageEvent2StartRepliesVector(builder, repliesLength)
		for j := repliesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(repliesOffsets[j])
		}
		repliesOffset = builder.EndVector(repliesLength)
	}
	txtOffset := builder.CreateString(t.Txt)
	mediaIdOffset := builder.CreateString(t.MediaId)
	tempMediaOffset := builder.CreateString(t.TempMedia)
	tempPaymentOffset := builder.CreateString(t.TempPayment)
	emojiOffset := builder.CreateString(t.Emoji)
	sticksOffset := flatbuffers.UOffsetT(0)
	if t.Sticks != nil {
		sticksLength := len(t.Sticks)
		sticksOffsets := make([]flatbuffers.UOffsetT, sticksLength)
		for j := 0; j < sticksLength; j++ {
			sticksOffsets[j] = t.Sticks[j].Pack(builder)
		}
		MessageEvent2StartSticksVector(builder, sticksLength)
		for j := sticksLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(sticksOffsets[j])
		}
		sticksOffset = builder.EndVector(sticksLength)
	}
	MessageEvent2Start(builder)
	MessageEvent2AddChatId(builder, chatIdOffset)
	MessageEvent2AddType(builder, t.Type)
	MessageEvent2AddReactionId(builder, reactionIdOffset)
	MessageEvent2AddSenderId(builder, senderIdOffset)
	MessageEvent2AddMessageId(builder, messageIdOffset)
	MessageEvent2AddRoot(builder, rootOffset)
	MessageEvent2AddTag(builder, tagOffset)
	MessageEvent2AddTimestamp(builder, t.Timestamp)
	MessageEvent2AddForwardedFrom(builder, forwardedFromOffset)
	MessageEvent2AddPaymentId(builder, paymentIdOffset)
	MessageEvent2AddNodes(builder, nodesOffset)
	MessageEvent2AddReplies(builder, repliesOffset)
	MessageEvent2AddTxt(builder, txtOffset)
	MessageEvent2AddMediaId(builder, mediaIdOffset)
	MessageEvent2AddTempMedia(builder, tempMediaOffset)
	MessageEvent2AddTempPayment(builder, tempPaymentOffset)
	MessageEvent2AddEmoji(builder, emojiOffset)
	MessageEvent2AddSticks(builder, sticksOffset)
	snipSizeOffset := t.SnipSize.Pack(builder)
	MessageEvent2AddSnipSize(builder, snipSizeOffset)
	return MessageEvent2End(builder)
}

func (rcv *MessageEvent2) UnPackTo(t *MessageEvent2T) {
	t.ChatId = rcv.ChatIdBytes()
	t.Type = rcv.Type()
	t.ReactionId = string(rcv.ReactionId())
	t.SenderId = string(rcv.SenderId())
	t.MessageId = string(rcv.MessageId())
	t.Root = string(rcv.Root())
	t.Tag = string(rcv.Tag())
	t.Timestamp = rcv.Timestamp()
	t.ForwardedFrom = string(rcv.ForwardedFrom())
	t.PaymentId = string(rcv.PaymentId())
	nodesLength := rcv.NodesLength()
	t.Nodes = make([]string, nodesLength)
	for j := 0; j < nodesLength; j++ {
		t.Nodes[j] = string(rcv.Nodes(j))
	}
	repliesLength := rcv.RepliesLength()
	t.Replies = make([]string, repliesLength)
	for j := 0; j < repliesLength; j++ {
		t.Replies[j] = string(rcv.Replies(j))
	}
	t.Txt = string(rcv.Txt())
	t.MediaId = string(rcv.MediaId())
	t.TempMedia = string(rcv.TempMedia())
	t.TempPayment = string(rcv.TempPayment())
	t.Emoji = string(rcv.Emoji())
	sticksLength := rcv.SticksLength()
	t.Sticks = make([]*StickerT, sticksLength)
	for j := 0; j < sticksLength; j++ {
		x := Sticker{}
		rcv.Sticks(&x, j)
		t.Sticks[j] = x.UnPack()
	}
	t.SnipSize = rcv.SnipSize(nil).UnPack()
}

func (rcv *MessageEvent2) UnPack() *MessageEvent2T {
	if rcv == nil { return nil }
	t := &MessageEvent2T{}
	rcv.UnPackTo(t)
	return t
}

type MessageEvent2 struct {
	_tab flatbuffers.Table
}

func GetRootAsMessageEvent2(buf []byte, offset flatbuffers.UOffsetT) *MessageEvent2 {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MessageEvent2{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMessageEvent2(buf []byte, offset flatbuffers.UOffsetT) *MessageEvent2 {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MessageEvent2{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MessageEvent2) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MessageEvent2) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MessageEvent2) ChatId(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *MessageEvent2) ChatIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MessageEvent2) ChatIdBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageEvent2) MutateChatId(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *MessageEvent2) Type() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageEvent2) MutateType(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *MessageEvent2) ReactionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageEvent2) SenderId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageEvent2) MessageId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageEvent2) Root() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageEvent2) Tag() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageEvent2) Timestamp() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageEvent2) MutateTimestamp(n uint64) bool {
	return rcv._tab.MutateUint64Slot(18, n)
}

func (rcv *MessageEvent2) ForwardedFrom() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageEvent2) PaymentId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageEvent2) Nodes(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *MessageEvent2) NodesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MessageEvent2) Replies(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *MessageEvent2) RepliesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MessageEvent2) Txt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageEvent2) MediaId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageEvent2) TempMedia() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageEvent2) TempPayment() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageEvent2) Emoji() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageEvent2) Sticks(obj *Sticker, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *MessageEvent2) SticksLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MessageEvent2) SnipSize(obj *Offset) *Offset {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Offset)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func MessageEvent2Start(builder *flatbuffers.Builder) {
	builder.StartObject(19)
}
func MessageEvent2AddChatId(builder *flatbuffers.Builder, chatId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(chatId), 0)
}
func MessageEvent2StartChatIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func MessageEvent2AddType(builder *flatbuffers.Builder, type_ byte) {
	builder.PrependByteSlot(1, type_, 0)
}
func MessageEvent2AddReactionId(builder *flatbuffers.Builder, reactionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(reactionId), 0)
}
func MessageEvent2AddSenderId(builder *flatbuffers.Builder, senderId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(senderId), 0)
}
func MessageEvent2AddMessageId(builder *flatbuffers.Builder, messageId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(messageId), 0)
}
func MessageEvent2AddRoot(builder *flatbuffers.Builder, root flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(root), 0)
}
func MessageEvent2AddTag(builder *flatbuffers.Builder, tag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(tag), 0)
}
func MessageEvent2AddTimestamp(builder *flatbuffers.Builder, timestamp uint64) {
	builder.PrependUint64Slot(7, timestamp, 0)
}
func MessageEvent2AddForwardedFrom(builder *flatbuffers.Builder, forwardedFrom flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(forwardedFrom), 0)
}
func MessageEvent2AddPaymentId(builder *flatbuffers.Builder, paymentId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(paymentId), 0)
}
func MessageEvent2AddNodes(builder *flatbuffers.Builder, nodes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(nodes), 0)
}
func MessageEvent2StartNodesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MessageEvent2AddReplies(builder *flatbuffers.Builder, replies flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(replies), 0)
}
func MessageEvent2StartRepliesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MessageEvent2AddTxt(builder *flatbuffers.Builder, txt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(txt), 0)
}
func MessageEvent2AddMediaId(builder *flatbuffers.Builder, mediaId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(mediaId), 0)
}
func MessageEvent2AddTempMedia(builder *flatbuffers.Builder, tempMedia flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(tempMedia), 0)
}
func MessageEvent2AddTempPayment(builder *flatbuffers.Builder, tempPayment flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(tempPayment), 0)
}
func MessageEvent2AddEmoji(builder *flatbuffers.Builder, emoji flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(emoji), 0)
}
func MessageEvent2AddSticks(builder *flatbuffers.Builder, sticks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(sticks), 0)
}
func MessageEvent2StartSticksVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MessageEvent2AddSnipSize(builder *flatbuffers.Builder, snipSize flatbuffers.UOffsetT) {
	builder.PrependStructSlot(18, flatbuffers.UOffsetT(snipSize), 0)
}
func MessageEvent2End(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
