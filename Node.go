// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatgen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NodeT struct {
	Id string `json:"id"`
	Tag string `json:"tag"`
	Type string `json:"type"`
	Name string `json:"name"`
	LastName string `json:"last_name"`
	BlueHash string `json:"blue_hash"`
	LastUpdate int64 `json:"last_update"`
	Description string `json:"description"`
	MessagingTokens []*MessageTokenT `json:"messaging_tokens"`
	MainDeviceId uint32 `json:"main_device_id"`
	HashTree []*HashTreeT `json:"hash_tree"`
	OwnerId string `json:"owner_id"`
	IsPublic bool `json:"is_public"`
	MediaId string `json:"media_id"`
	Children []string `json:"children"`
	Posts []string `json:"posts"`
	Admins []string `json:"admins"`
	Members []string `json:"members"`
	Privates []string `json:"privates"`
	DeviceId uint32 `json:"device_id"`
	Neuter string `json:"neuter"`
	Latitude float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

func (t *NodeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	idOffset := builder.CreateString(t.Id)
	tagOffset := builder.CreateString(t.Tag)
	type_Offset := builder.CreateString(t.Type)
	nameOffset := builder.CreateString(t.Name)
	lastNameOffset := builder.CreateString(t.LastName)
	blueHashOffset := builder.CreateString(t.BlueHash)
	descriptionOffset := builder.CreateString(t.Description)
	messagingTokensOffset := flatbuffers.UOffsetT(0)
	if t.MessagingTokens != nil {
		messagingTokensLength := len(t.MessagingTokens)
		messagingTokensOffsets := make([]flatbuffers.UOffsetT, messagingTokensLength)
		for j := 0; j < messagingTokensLength; j++ {
			messagingTokensOffsets[j] = t.MessagingTokens[j].Pack(builder)
		}
		NodeStartMessagingTokensVector(builder, messagingTokensLength)
		for j := messagingTokensLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(messagingTokensOffsets[j])
		}
		messagingTokensOffset = builder.EndVector(messagingTokensLength)
	}
	hashTreeOffset := flatbuffers.UOffsetT(0)
	if t.HashTree != nil {
		hashTreeLength := len(t.HashTree)
		hashTreeOffsets := make([]flatbuffers.UOffsetT, hashTreeLength)
		for j := 0; j < hashTreeLength; j++ {
			hashTreeOffsets[j] = t.HashTree[j].Pack(builder)
		}
		NodeStartHashTreeVector(builder, hashTreeLength)
		for j := hashTreeLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(hashTreeOffsets[j])
		}
		hashTreeOffset = builder.EndVector(hashTreeLength)
	}
	ownerIdOffset := builder.CreateString(t.OwnerId)
	mediaIdOffset := builder.CreateString(t.MediaId)
	childrenOffset := flatbuffers.UOffsetT(0)
	if t.Children != nil {
		childrenLength := len(t.Children)
		childrenOffsets := make([]flatbuffers.UOffsetT, childrenLength)
		for j := 0; j < childrenLength; j++ {
			childrenOffsets[j] = builder.CreateString(t.Children[j])
		}
		NodeStartChildrenVector(builder, childrenLength)
		for j := childrenLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(childrenOffsets[j])
		}
		childrenOffset = builder.EndVector(childrenLength)
	}
	postsOffset := flatbuffers.UOffsetT(0)
	if t.Posts != nil {
		postsLength := len(t.Posts)
		postsOffsets := make([]flatbuffers.UOffsetT, postsLength)
		for j := 0; j < postsLength; j++ {
			postsOffsets[j] = builder.CreateString(t.Posts[j])
		}
		NodeStartPostsVector(builder, postsLength)
		for j := postsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(postsOffsets[j])
		}
		postsOffset = builder.EndVector(postsLength)
	}
	adminsOffset := flatbuffers.UOffsetT(0)
	if t.Admins != nil {
		adminsLength := len(t.Admins)
		adminsOffsets := make([]flatbuffers.UOffsetT, adminsLength)
		for j := 0; j < adminsLength; j++ {
			adminsOffsets[j] = builder.CreateString(t.Admins[j])
		}
		NodeStartAdminsVector(builder, adminsLength)
		for j := adminsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(adminsOffsets[j])
		}
		adminsOffset = builder.EndVector(adminsLength)
	}
	membersOffset := flatbuffers.UOffsetT(0)
	if t.Members != nil {
		membersLength := len(t.Members)
		membersOffsets := make([]flatbuffers.UOffsetT, membersLength)
		for j := 0; j < membersLength; j++ {
			membersOffsets[j] = builder.CreateString(t.Members[j])
		}
		NodeStartMembersVector(builder, membersLength)
		for j := membersLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(membersOffsets[j])
		}
		membersOffset = builder.EndVector(membersLength)
	}
	privatesOffset := flatbuffers.UOffsetT(0)
	if t.Privates != nil {
		privatesLength := len(t.Privates)
		privatesOffsets := make([]flatbuffers.UOffsetT, privatesLength)
		for j := 0; j < privatesLength; j++ {
			privatesOffsets[j] = builder.CreateString(t.Privates[j])
		}
		NodeStartPrivatesVector(builder, privatesLength)
		for j := privatesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(privatesOffsets[j])
		}
		privatesOffset = builder.EndVector(privatesLength)
	}
	neuterOffset := builder.CreateString(t.Neuter)
	NodeStart(builder)
	NodeAddId(builder, idOffset)
	NodeAddTag(builder, tagOffset)
	NodeAddType(builder, type_Offset)
	NodeAddName(builder, nameOffset)
	NodeAddLastName(builder, lastNameOffset)
	NodeAddBlueHash(builder, blueHashOffset)
	NodeAddLastUpdate(builder, t.LastUpdate)
	NodeAddDescription(builder, descriptionOffset)
	NodeAddMessagingTokens(builder, messagingTokensOffset)
	NodeAddMainDeviceId(builder, t.MainDeviceId)
	NodeAddHashTree(builder, hashTreeOffset)
	NodeAddOwnerId(builder, ownerIdOffset)
	NodeAddIsPublic(builder, t.IsPublic)
	NodeAddMediaId(builder, mediaIdOffset)
	NodeAddChildren(builder, childrenOffset)
	NodeAddPosts(builder, postsOffset)
	NodeAddAdmins(builder, adminsOffset)
	NodeAddMembers(builder, membersOffset)
	NodeAddPrivates(builder, privatesOffset)
	NodeAddDeviceId(builder, t.DeviceId)
	NodeAddNeuter(builder, neuterOffset)
	NodeAddLatitude(builder, t.Latitude)
	NodeAddLongitude(builder, t.Longitude)
	return NodeEnd(builder)
}

func (rcv *Node) UnPackTo(t *NodeT) {
	t.Id = string(rcv.Id())
	t.Tag = string(rcv.Tag())
	t.Type = string(rcv.Type())
	t.Name = string(rcv.Name())
	t.LastName = string(rcv.LastName())
	t.BlueHash = string(rcv.BlueHash())
	t.LastUpdate = rcv.LastUpdate()
	t.Description = string(rcv.Description())
	messagingTokensLength := rcv.MessagingTokensLength()
	t.MessagingTokens = make([]*MessageTokenT, messagingTokensLength)
	for j := 0; j < messagingTokensLength; j++ {
		x := MessageToken{}
		rcv.MessagingTokens(&x, j)
		t.MessagingTokens[j] = x.UnPack()
	}
	t.MainDeviceId = rcv.MainDeviceId()
	hashTreeLength := rcv.HashTreeLength()
	t.HashTree = make([]*HashTreeT, hashTreeLength)
	for j := 0; j < hashTreeLength; j++ {
		x := HashTree{}
		rcv.HashTree(&x, j)
		t.HashTree[j] = x.UnPack()
	}
	t.OwnerId = string(rcv.OwnerId())
	t.IsPublic = rcv.IsPublic()
	t.MediaId = string(rcv.MediaId())
	childrenLength := rcv.ChildrenLength()
	t.Children = make([]string, childrenLength)
	for j := 0; j < childrenLength; j++ {
		t.Children[j] = string(rcv.Children(j))
	}
	postsLength := rcv.PostsLength()
	t.Posts = make([]string, postsLength)
	for j := 0; j < postsLength; j++ {
		t.Posts[j] = string(rcv.Posts(j))
	}
	adminsLength := rcv.AdminsLength()
	t.Admins = make([]string, adminsLength)
	for j := 0; j < adminsLength; j++ {
		t.Admins[j] = string(rcv.Admins(j))
	}
	membersLength := rcv.MembersLength()
	t.Members = make([]string, membersLength)
	for j := 0; j < membersLength; j++ {
		t.Members[j] = string(rcv.Members(j))
	}
	privatesLength := rcv.PrivatesLength()
	t.Privates = make([]string, privatesLength)
	for j := 0; j < privatesLength; j++ {
		t.Privates[j] = string(rcv.Privates(j))
	}
	t.DeviceId = rcv.DeviceId()
	t.Neuter = string(rcv.Neuter())
	t.Latitude = rcv.Latitude()
	t.Longitude = rcv.Longitude()
}

func (rcv *Node) UnPack() *NodeT {
	if rcv == nil { return nil }
	t := &NodeT{}
	rcv.UnPackTo(t)
	return t
}

type Node struct {
	_tab flatbuffers.Table
}

func GetRootAsNode(buf []byte, offset flatbuffers.UOffsetT) *Node {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Node{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsNode(buf []byte, offset flatbuffers.UOffsetT) *Node {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Node{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Node) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Node) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Node) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Node) Tag() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Node) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Node) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Node) LastName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Node) BlueHash() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Node) LastUpdate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Node) MutateLastUpdate(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *Node) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Node) MessagingTokens(obj *MessageToken, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Node) MessagingTokensLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Node) MainDeviceId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Node) MutateMainDeviceId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(22, n)
}

func (rcv *Node) HashTree(obj *HashTree, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Node) HashTreeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Node) OwnerId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Node) IsPublic() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Node) MutateIsPublic(n bool) bool {
	return rcv._tab.MutateBoolSlot(28, n)
}

func (rcv *Node) MediaId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Node) Children(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Node) ChildrenLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Node) Posts(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Node) PostsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Node) Admins(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Node) AdminsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Node) Members(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Node) MembersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Node) Privates(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Node) PrivatesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Node) DeviceId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Node) MutateDeviceId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(42, n)
}

func (rcv *Node) Neuter() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Node) Latitude() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Node) MutateLatitude(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

func (rcv *Node) Longitude() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Node) MutateLongitude(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

func NodeStart(builder *flatbuffers.Builder) {
	builder.StartObject(23)
}
func NodeAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func NodeAddTag(builder *flatbuffers.Builder, tag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(tag), 0)
}
func NodeAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(type_), 0)
}
func NodeAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(name), 0)
}
func NodeAddLastName(builder *flatbuffers.Builder, lastName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(lastName), 0)
}
func NodeAddBlueHash(builder *flatbuffers.Builder, blueHash flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(blueHash), 0)
}
func NodeAddLastUpdate(builder *flatbuffers.Builder, lastUpdate int64) {
	builder.PrependInt64Slot(6, lastUpdate, 0)
}
func NodeAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(description), 0)
}
func NodeAddMessagingTokens(builder *flatbuffers.Builder, messagingTokens flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(messagingTokens), 0)
}
func NodeStartMessagingTokensVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func NodeAddMainDeviceId(builder *flatbuffers.Builder, mainDeviceId uint32) {
	builder.PrependUint32Slot(9, mainDeviceId, 0)
}
func NodeAddHashTree(builder *flatbuffers.Builder, hashTree flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(hashTree), 0)
}
func NodeStartHashTreeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func NodeAddOwnerId(builder *flatbuffers.Builder, ownerId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(ownerId), 0)
}
func NodeAddIsPublic(builder *flatbuffers.Builder, isPublic bool) {
	builder.PrependBoolSlot(12, isPublic, false)
}
func NodeAddMediaId(builder *flatbuffers.Builder, mediaId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(mediaId), 0)
}
func NodeAddChildren(builder *flatbuffers.Builder, children flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(children), 0)
}
func NodeStartChildrenVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func NodeAddPosts(builder *flatbuffers.Builder, posts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(posts), 0)
}
func NodeStartPostsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func NodeAddAdmins(builder *flatbuffers.Builder, admins flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(admins), 0)
}
func NodeStartAdminsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func NodeAddMembers(builder *flatbuffers.Builder, members flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(members), 0)
}
func NodeStartMembersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func NodeAddPrivates(builder *flatbuffers.Builder, privates flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(privates), 0)
}
func NodeStartPrivatesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func NodeAddDeviceId(builder *flatbuffers.Builder, deviceId uint32) {
	builder.PrependUint32Slot(19, deviceId, 0)
}
func NodeAddNeuter(builder *flatbuffers.Builder, neuter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(neuter), 0)
}
func NodeAddLatitude(builder *flatbuffers.Builder, latitude float64) {
	builder.PrependFloat64Slot(21, latitude, 0.0)
}
func NodeAddLongitude(builder *flatbuffers.Builder, longitude float64) {
	builder.PrependFloat64Slot(22, longitude, 0.0)
}
func NodeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
