// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatgen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TempIdT struct {
	Timestamp int64 `json:"timestamp"`
	U32 uint32 `json:"u32"`
	Place uint16 `json:"place"`
	Kind byte `json:"kind"`
}

func (t *TempIdT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	TempIdStart(builder)
	TempIdAddTimestamp(builder, t.Timestamp)
	TempIdAddU32(builder, t.U32)
	TempIdAddPlace(builder, t.Place)
	TempIdAddKind(builder, t.Kind)
	return TempIdEnd(builder)
}

func (rcv *TempId) UnPackTo(t *TempIdT) {
	t.Timestamp = rcv.Timestamp()
	t.U32 = rcv.U32()
	t.Place = rcv.Place()
	t.Kind = rcv.Kind()
}

func (rcv *TempId) UnPack() *TempIdT {
	if rcv == nil {
		return nil
	}
	t := &TempIdT{}
	rcv.UnPackTo(t)
	return t
}

type TempId struct {
	_tab flatbuffers.Table
}

func GetRootAsTempId(buf []byte, offset flatbuffers.UOffsetT) *TempId {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TempId{}
	x.Init(buf, n+offset)
	return x
}

func FinishTempIdBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsTempId(buf []byte, offset flatbuffers.UOffsetT) *TempId {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TempId{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedTempIdBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *TempId) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TempId) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TempId) Timestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TempId) MutateTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *TempId) U32() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TempId) MutateU32(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *TempId) Place() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TempId) MutatePlace(n uint16) bool {
	return rcv._tab.MutateUint16Slot(8, n)
}

func (rcv *TempId) Kind() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TempId) MutateKind(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func TempIdStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func TempIdAddTimestamp(builder *flatbuffers.Builder, timestamp int64) {
	builder.PrependInt64Slot(0, timestamp, 0)
}
func TempIdAddU32(builder *flatbuffers.Builder, u32 uint32) {
	builder.PrependUint32Slot(1, u32, 0)
}
func TempIdAddPlace(builder *flatbuffers.Builder, place uint16) {
	builder.PrependUint16Slot(2, place, 0)
}
func TempIdAddKind(builder *flatbuffers.Builder, kind byte) {
	builder.PrependByteSlot(3, kind, 0)
}
func TempIdEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
