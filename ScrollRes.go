// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatgen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ScrollRes struct {
	_tab flatbuffers.Table
}

func GetRootAsScrollRes(buf []byte, offset flatbuffers.UOffsetT) *ScrollRes {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ScrollRes{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsScrollRes(buf []byte, offset flatbuffers.UOffsetT) *ScrollRes {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ScrollRes{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ScrollRes) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ScrollRes) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ScrollRes) Code() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ScrollRes) MutateCode(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *ScrollRes) Before() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ScrollRes) MutateBefore(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *ScrollRes) Root() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ScrollResStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ScrollResAddCode(builder *flatbuffers.Builder, code bool) {
	builder.PrependBoolSlot(0, code, false)
}
func ScrollResAddBefore(builder *flatbuffers.Builder, before bool) {
	builder.PrependBoolSlot(1, before, false)
}
func ScrollResAddRoot(builder *flatbuffers.Builder, root flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(root), 0)
}
func ScrollResEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
