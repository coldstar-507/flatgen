// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatgen

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SnipT struct {
	ChatId string `json:"chat_id"`
	SenderId string `json:"sender_id"`
	Tag string `json:"tag"`
	MediaId string `json:"media_id"`
	TempMedia string `json:"temp_media"`
	Txt string `json:"txt"`
	SnipSize *OffsetT `json:"snip_size"`
	Sticks []*StickerT `json:"sticks"`
}

func (t *SnipT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	chatIdOffset := flatbuffers.UOffsetT(0)
	if t.ChatId != "" {
		chatIdOffset = builder.CreateString(t.ChatId)
	}
	senderIdOffset := flatbuffers.UOffsetT(0)
	if t.SenderId != "" {
		senderIdOffset = builder.CreateString(t.SenderId)
	}
	tagOffset := flatbuffers.UOffsetT(0)
	if t.Tag != "" {
		tagOffset = builder.CreateString(t.Tag)
	}
	mediaIdOffset := flatbuffers.UOffsetT(0)
	if t.MediaId != "" {
		mediaIdOffset = builder.CreateString(t.MediaId)
	}
	tempMediaOffset := flatbuffers.UOffsetT(0)
	if t.TempMedia != "" {
		tempMediaOffset = builder.CreateString(t.TempMedia)
	}
	txtOffset := flatbuffers.UOffsetT(0)
	if t.Txt != "" {
		txtOffset = builder.CreateString(t.Txt)
	}
	sticksOffset := flatbuffers.UOffsetT(0)
	if t.Sticks != nil {
		sticksLength := len(t.Sticks)
		sticksOffsets := make([]flatbuffers.UOffsetT, sticksLength)
		for j := 0; j < sticksLength; j++ {
			sticksOffsets[j] = t.Sticks[j].Pack(builder)
		}
		SnipStartSticksVector(builder, sticksLength)
		for j := sticksLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(sticksOffsets[j])
		}
		sticksOffset = builder.EndVector(sticksLength)
	}
	SnipStart(builder)
	SnipAddChatId(builder, chatIdOffset)
	SnipAddSenderId(builder, senderIdOffset)
	SnipAddTag(builder, tagOffset)
	SnipAddMediaId(builder, mediaIdOffset)
	SnipAddTempMedia(builder, tempMediaOffset)
	SnipAddTxt(builder, txtOffset)
	snipSizeOffset := t.SnipSize.Pack(builder)
	SnipAddSnipSize(builder, snipSizeOffset)
	SnipAddSticks(builder, sticksOffset)
	return SnipEnd(builder)
}

func (rcv *Snip) UnPackTo(t *SnipT) {
	t.ChatId = string(rcv.ChatId())
	t.SenderId = string(rcv.SenderId())
	t.Tag = string(rcv.Tag())
	t.MediaId = string(rcv.MediaId())
	t.TempMedia = string(rcv.TempMedia())
	t.Txt = string(rcv.Txt())
	t.SnipSize = rcv.SnipSize(nil).UnPack()
	sticksLength := rcv.SticksLength()
	t.Sticks = make([]*StickerT, sticksLength)
	for j := 0; j < sticksLength; j++ {
		x := Sticker{}
		rcv.Sticks(&x, j)
		t.Sticks[j] = x.UnPack()
	}
}

func (rcv *Snip) UnPack() *SnipT {
	if rcv == nil {
		return nil
	}
	t := &SnipT{}
	rcv.UnPackTo(t)
	return t
}

type Snip struct {
	_tab flatbuffers.Table
}

func GetRootAsSnip(buf []byte, offset flatbuffers.UOffsetT) *Snip {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Snip{}
	x.Init(buf, n+offset)
	return x
}

func FinishSnipBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsSnip(buf []byte, offset flatbuffers.UOffsetT) *Snip {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Snip{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSnipBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Snip) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Snip) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Snip) ChatId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Snip) SenderId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Snip) Tag() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Snip) MediaId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Snip) TempMedia() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Snip) Txt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Snip) SnipSize(obj *Offset) *Offset {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Offset)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Snip) Sticks(obj *Sticker, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Snip) SticksLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func SnipStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func SnipAddChatId(builder *flatbuffers.Builder, chatId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(chatId), 0)
}
func SnipAddSenderId(builder *flatbuffers.Builder, senderId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(senderId), 0)
}
func SnipAddTag(builder *flatbuffers.Builder, tag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(tag), 0)
}
func SnipAddMediaId(builder *flatbuffers.Builder, mediaId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(mediaId), 0)
}
func SnipAddTempMedia(builder *flatbuffers.Builder, tempMedia flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(tempMedia), 0)
}
func SnipAddTxt(builder *flatbuffers.Builder, txt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(txt), 0)
}
func SnipAddSnipSize(builder *flatbuffers.Builder, snipSize flatbuffers.UOffsetT) {
	builder.PrependStructSlot(6, flatbuffers.UOffsetT(snipSize), 0)
}
func SnipAddSticks(builder *flatbuffers.Builder, sticks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(sticks), 0)
}
func SnipStartSticksVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SnipEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
